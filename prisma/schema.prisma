generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String?        @unique
  name          String
  passwordHash  String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  consultations Consultation[]

  @@map("users")
}

model Professional {
  id            String                  @id @default(uuid())
  name          String
  crm           String?
  phone         String?
  address       String?
  notes         String?                 @db.Text
  isActive      Boolean                 @default(true)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  clinicId      String?
  consultations Consultation[]
  files         File[]
  specialties   ProfessionalSpecialty[]
  clinic        Clinic?                 @relation(fields: [clinicId], references: [id])

  @@index([clinicId], map: "professionals_clinicId_fkey")
  @@map("professionals")
}

model Specialty {
  id            String                  @id @default(uuid())
  name          String                  @unique
  createdAt     DateTime                @default(now())
  professionals ProfessionalSpecialty[]

  @@map("specialties")
}

model ProfessionalSpecialty {
  id             String       @id @default(uuid())
  professionalId String
  specialtyId    String
  createdAt      DateTime     @default(now())
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  specialty      Specialty    @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@unique([professionalId, specialtyId])
  @@index([specialtyId], map: "professional_specialties_specialtyId_fkey")
  @@map("professional_specialties")
}

model Consultation {
  id             String       @id @default(uuid())
  date           DateTime
  proposito      String?
  notes          String?      @db.Text
  userId         String
  professionalId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  professional   Professional @relation(fields: [professionalId], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  files          File[]

  @@index([professionalId], map: "consultations_professionalId_fkey")
  @@index([userId], map: "consultations_userId_fkey")
  @@map("consultations")
}

model File {
  id             String        @id @default(uuid())
  filename       String
  customName     String?
  path           String
  mimeType       String
  size           Int
  consultationId String
  professionalId String
  uploadedAt     DateTime      @default(now())
  categoryId     String?
  category       FileCategory? @relation(fields: [categoryId], references: [id])
  consultation   Consultation  @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  professional   Professional  @relation(fields: [professionalId], references: [id])

  @@index([categoryId], map: "files_categoryId_fkey")
  @@index([consultationId], map: "files_consultationId_fkey")
  @@index([professionalId], map: "files_professionalId_fkey")
  @@map("files")
}

model FileCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  files     File[]

  @@map("file_categories")
}

model Clinic {
  id            String         @id @default(uuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  professionals Professional[]

  @@map("clinics")
}

enum UserRole {
  ADMIN
  USER
}
