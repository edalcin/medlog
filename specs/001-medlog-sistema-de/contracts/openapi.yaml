openapi: 3.0.3
info:
  title: MedLog API
  description: API for MedLog medical consultation management system
  version: 1.0.0
  contact:
    email: admin@medlog.local

servers:
  - url: '{protocol}://{host}:{port}/api'
    variables:
      protocol:
        default: http
        enum: [http, https]
      host:
        default: localhost
      port:
        default: '3123'

security:
  - bearerAuth: []

paths:
  /auth/google:
    get:
      summary: Initiate Google OAuth login
      operationId: initiateGoogleAuth
      responses:
        '302':
          description: Redirect to Google OAuth
          headers:
            Location:
              schema:
                type: string

  /auth/callback/google:
    get:
      summary: Google OAuth callback
      operationId: googleAuthCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        '302':
          description: Redirect to dashboard or login error
          headers:
            Location:
              schema:
                type: string

  /auth/me:
    get:
      summary: Get current user info
      operationId: getCurrentUser
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /consultations:
    get:
      summary: List user's consultations with optional filters
      operationId: listConsultations
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: professionalId
          in: query
          schema:
            type: string
            format: uuid
        - name: specialty
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of consultations
          content:
            application/json:
              schema:
                type: object
                properties:
                  consultations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Consultation'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create new consultation
      operationId: createConsultation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - professionalId
              properties:
                date:
                  type: string
                  format: date-time
                professionalId:
                  type: string
                  format: uuid
                notes:
                  type: string
      responses:
        '201':
          description: Consultation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consultation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /consultations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get consultation by ID
      operationId: getConsultation
      responses:
        '200':
          description: Consultation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consultation'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update consultation
      operationId: updateConsultation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date-time
                professionalId:
                  type: string
                  format: uuid
                notes:
                  type: string
      responses:
        '200':
          description: Consultation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consultation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Delete consultation
      operationId: deleteConsultation
      responses:
        '204':
          description: Consultation deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /professionals:
    get:
      summary: List professionals (active only by default)
      operationId: listProfessionals
      parameters:
        - name: activeOnly
          in: query
          schema:
            type: boolean
            default: true
        - name: specialty
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of professionals
          content:
            application/json:
              schema:
                type: object
                properties:
                  professionals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Professional'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create new professional
      operationId: createProfessional
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - specialty
              properties:
                name:
                  type: string
                specialty:
                  type: string
                crm:
                  type: string
                phone:
                  type: string
                address:
                  type: string
      responses:
        '201':
          description: Professional created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /professionals/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get professional by ID
      operationId: getProfessional
      responses:
        '200':
          description: Professional details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update professional
      operationId: updateProfessional
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                specialty:
                  type: string
                crm:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                isActive:
                  type: boolean
      responses:
        '200':
          description: Professional updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Deactivate professional
      operationId: deactivateProfessional
      responses:
        '200':
          description: Professional deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /consultations/{consultationId}/files:
    parameters:
      - name: consultationId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      summary: Upload file to consultation
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload (PDF, PNG, JPG)
      responses:
        '201':
          description: File uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /files/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Download file
      operationId: downloadFile
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Delete file
      operationId: deleteFile
      responses:
        '204':
          description: File deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /admin/users:
    get:
      summary: List all users (admin only)
      operationId: listUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Invite new user (admin only)
      operationId: inviteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: User invited
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /admin/files:
    get:
      summary: List all files (admin only)
      operationId: listAllFiles
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  total:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [admin, user]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Professional:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        specialty:
          type: string
        crm:
          type: string
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Consultation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        notes:
          type: string
        userId:
          type: string
          format: uuid
        professionalId:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        professional:
          $ref: '#/components/schemas/Professional'
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    File:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        path:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        consultationId:
          type: string
          format: uuid
        professionalId:
          type: string
          format: uuid
        uploadedAt:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT