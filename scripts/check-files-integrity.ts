import { PrismaClient } from '@prisma/client'
import * as fs from 'fs'
import * as path from 'path'

const prisma = new PrismaClient()

async function checkFilesIntegrity() {
  console.log('üîç Verificando integridade dos arquivos...\n')

  const uploadsDir = process.env.FILES_PATH || path.join(process.cwd(), 'uploads')
  console.log(`üìÅ Diret√≥rio de uploads: ${uploadsDir}\n`)

  // Get all files from database
  const files = await prisma.file.findMany({
    include: {
      consultation: {
        include: {
          user: {
            select: {
              name: true,
              email: true,
            },
          },
        },
      },
      category: true,
    },
    orderBy: {
      uploadedAt: 'desc',
    },
  })

  console.log(`üìä Total de arquivos no banco: ${files.length}\n`)

  let missingCount = 0
  let existingCount = 0
  const missingFiles: any[] = []

  for (const file of files) {
    const filePath = path.join(uploadsDir, file.path)
    const exists = fs.existsSync(filePath)

    if (exists) {
      existingCount++
    } else {
      missingCount++
      missingFiles.push({
        id: file.id,
        filename: file.filename,
        customName: file.customName,
        path: file.path,
        consultationId: file.consultationId,
        consultationDate: file.consultation.date,
        user: file.consultation.user.name,
        uploadedAt: file.uploadedAt,
        category: file.category?.name || 'Sem categoria',
      })
      console.log(`‚ùå FALTANDO: ${file.customName || file.filename}`)
      console.log(`   Path: ${file.path}`)
      console.log(`   ID: ${file.id}`)
      console.log(`   Consulta: ${file.consultationId} (${new Date(file.consultation.date).toLocaleDateString('pt-BR')})`)
      console.log(`   Usu√°rio: ${file.consultation.user.name}`)
      console.log(`   Categoria: ${file.category?.name || 'Sem categoria'}`)
      console.log(`   Upload: ${new Date(file.uploadedAt).toLocaleDateString('pt-BR')}`)
      console.log('')
    }
  }

  console.log('\nüìà Resumo:')
  console.log(`‚úÖ Arquivos encontrados: ${existingCount}`)
  console.log(`‚ùå Arquivos faltando: ${missingCount}`)
  console.log(`üìä Total no banco: ${files.length}`)
  console.log(`üìÅ Diret√≥rio: ${uploadsDir}`)

  if (missingCount > 0) {
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Alguns arquivos est√£o registrados no banco mas n√£o existem fisicamente!')
    console.log('Poss√≠veis causas:')
    console.log('  1. Volume Docker n√£o est√° montado corretamente')
    console.log('  2. Arquivos foram deletados manualmente')
    console.log('  3. Uploads feitos antes de configurar o volume corretamente')
    console.log('\nSolu√ß√µes:')
    console.log('  1. Restaurar os arquivos do backup (se dispon√≠vel)')
    console.log('  2. Remover registros √≥rf√£os do banco de dados')
    console.log('  3. Verificar configura√ß√£o do volume no Docker')
  }

  // Check for orphaned physical files
  console.log('\n\nüîç Verificando arquivos √≥rf√£os (f√≠sicos sem registro no banco)...\n')

  if (fs.existsSync(uploadsDir)) {
    const physicalFiles = fs.readdirSync(uploadsDir)
    const dbPaths = new Set(files.map(f => f.path))
    const orphanedFiles = physicalFiles.filter(f => !dbPaths.has(f))

    if (orphanedFiles.length > 0) {
      console.log(`‚ö†Ô∏è  Encontrados ${orphanedFiles.length} arquivo(s) √≥rf√£o(s):`)
      orphanedFiles.forEach(f => console.log(`   - ${f}`))
      console.log('\nEstes arquivos existem fisicamente mas n√£o est√£o no banco de dados.')
      console.log('Podem ser deletados com seguran√ßa.')
    } else {
      console.log('‚úÖ Nenhum arquivo √≥rf√£o encontrado.')
    }
  } else {
    console.log(`‚ùå Diret√≥rio de uploads n√£o existe: ${uploadsDir}`)
  }

  await prisma.$disconnect()
}

checkFilesIntegrity()
  .catch((error) => {
    console.error('‚ùå Erro:', error)
    process.exit(1)
  })
